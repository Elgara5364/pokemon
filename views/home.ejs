<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <!-- tes komen -->
    <title>Pokemon Eksplorer by Loave</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen p-8">
    <%
    // Function to get gradient colors based on Pokémon type
    function getTypeGradient(type) {
      const typeColors = {
        normal: 'from-gray-400 to-gray-500',
        fire: 'from-red-500 to-orange-500',
        water: 'from-blue-500 to-blue-600',
        grass: 'from-green-500 to-green-600',
        electric: 'from-yellow-400 to-yellow-500',
        ice: 'from-blue-200 to-blue-400',
        fighting: 'from-red-700 to-red-800',
        poison: 'from-purple-500 to-purple-600',
        ground: 'from-yellow-600 to-yellow-700',
        flying: 'from-indigo-300 to-indigo-400',
        psychic: 'from-pink-500 to-pink-600',
        bug: 'from-green-600 to-green-700',
        rock: 'from-yellow-800 to-yellow-900',
        ghost: 'from-purple-700 to-purple-800',
        dark: 'from-gray-800 to-gray-900',
        dragon: 'from-indigo-700 to-indigo-800',
        steel: 'from-gray-500 to-gray-600',
        fairy: 'from-pink-300 to-pink-400'
      };
      return typeColors[type] || 'from-indigo-500 to-purple-600';
    }
  %>

    <div class="max-w-6xl mx-auto">
      <!-- Header -->
      <header class="text-center mb-8">
        <h1 class="text-4xl font-bold text-indigo-800"><a href="/">Pokemon Explorer</a></h1>

        <p class="text-gray-600 mt-2">Search for any Pokémon to see its details</p>
      </header>
      <!-- Search Form -->
      <form method="post" action="/get-pokemon" id="pokemonForm" class="mb-8">
        <div class="flex flex-wrap justify-center gap-4 max-w-4xl mx-auto">
          <input 
            id="pokemonInput"
            name="pokemon"
            placeholder="Enter ID or Pokémon name (e.g., pikachu, charizard)"
            class="flex-1 px-4 py-3 rounded-lg border border-indigo-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 shadow-sm"
            required
          />
          <button 
            type="submit"
            class="px-6 py-3 bg-indigo-600 text-white font-medium rounded-lg hover:bg-indigo-700 transition-colors shadow-sm"
          >
            Search
          </button>
          <a href="/favorites" class="px-6 py-3 bg-white text-indigo-600 font-medium hover:text-indigo-900 transition-colors shadow-sm rounded-lg" onclick="sendFavorites(event)" id="goToFavorite">Lihat Favorit</a>
          <button type="button" id="openFilterBtn" class="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path d="M3 4a1 1 0 011-1h16a1 1 0 01.8 1.6l-5.6 7.4V19a1 1 0 01-1.45.9l-4-2A1 1 0 019 17v-5.6L3.2 5.6A1 1 0 013 4z" /></svg>
            Filter
          </button>
        </div>
      </form>

      <!-- Modal filter -->
      <div id="filterModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
        <div class="bg-white w-full max-w-md p-6 rounded-xl shadow-lg relative">
          <h2 class="text-xl font-bold mb-4">Pilih Satu Tipe Pokémon</h2>
          <div class="grid grid-cols-2 gap-3 max-h-64 overflow-y-auto">
            <% const types = ["fire", "water", "grass", "electric", "psychic", "ice", "dragon", "dark", "fairy", "normal", "fighting", "flying", "poison", "ground", "rock", "bug", "ghost", "steel"]; %>
            <% types.forEach(function(type) { %>
              <label class="flex items-center gap-2 px-3 py-2 border rounded-lg hover:bg-gray-100 cursor-pointer">
                <input type="radio" name="type" value="<%= type %>" class="accent-blue-600" <%= selectedType === type ? 'checked' : '' %>>
                <span class="capitalize"><%= type %></span>
                
              </label>
            <% }); %>
          </div>
          <div class="mt-6 flex justify-end gap-2">
            <button id="cancelBtn" class="px-4 py-2 border rounded-lg hover:bg-gray-100">Batal</button>
            <button id="saveFilterBtn" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Simpan</button></div>
          </div>
        </div>
      </div>

      <% if(result.results.pokemon) { %>
      <div id="pokemonList" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 ">
          <!-- PATH WHEN FILTER IS ACTIVE-->
        <% result.results.pokemon.map((pokemon, idx) => { %>
        <div class="bg-gray-200 p-6  shadow-lg pokemon-card <%= idx >= 20 ? 'hidden extra-pokemon' : '' %>">
            <div class="w-full flex justify-between"> 
              <p class="text-lg font-bold">#<%= pokemonShortData[idx].id.toString().padStart(4, '0') %>
              </p>
              <% 
              const pokemonId = pokemonShortData[idx].id ;
              const pokemonImg = pokemonShortData[idx].imgPokemon ;
              %>
            </div>
            <a href="/get-pokemon/<%= pokemonShortData[idx].id %>" class="flex flex-col  rounded-lg text-center transition-transform transform hover:scale-105 ">
              <img src="<%= pokemonShortData[idx].imgPokemon %>" alt="<%= pokemon.name %>" class="mx-auto mb-2">
              <h2 class="text-2xl font-semibold mb-3"><%= pokemon.pokemon.name %></h2>
              <div class="flex justify-center gap-2">
                <% pokemonShortData[idx].types.forEach(type => { %>
                  <span class="px-3 py-1 bg-opacity-30 rounded-full text-sm font-medium capitalize flex gap-2 bg-gradient-to-r <%= getTypeGradient(type) %>">
                    <%= type %>
                  </span>
                <% }); %>
              </div>
            </a>
        </div>
        <% }) %>
<<<<<<< HEAD
        <% console.log(result.results.pokemon.length > 20) %>
=======
>>>>>>> f5821a55efa9288d31d65225643b322ea54e90a2
      </div>

      <% if (result.results.pokemon.length > 20) { %>
        <div class="flex justify-center mt-6">
          <button id="loadMoreBtn" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
            Tampilkan lebih banyak
          </button>
        </div>
      <% } %>
    </div>
      <% } else { %> 
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
          <!-- PATH WHEN FILTER IS NOT ACTIVE-->
          <% result.results.map((pokemon, idx) => { %> 
          <div class="bg-gray-200 p-6  shadow-lg ">
              <div class="w-full flex justify-between"> 
                <p class="text-lg font-bold">#<%= pokemonShortData[idx].id.toString().padStart(4, '0') %>
                </p>
                <% 
                const pokemonId = pokemonShortData[idx].id ;
                const pokemonImg = pokemonShortData[idx].imgPokemon ;
                %>
              </div>
              <a href="/get-pokemon/<%= pokemonShortData[idx].id %>" class="flex flex-col  rounded-lg text-center transition-transform transform hover:scale-105 ">
                <img src="<%= pokemonShortData[idx].imgPokemon %>" alt="<%= pokemon.name %>" class="mx-auto mb-2">
                <h2 class="text-2xl font-semibold mb-3"><%= pokemon.name %></h2>
                <div class="flex justify-center gap-2">
                  <% pokemonShortData[idx].types.forEach(type => { %>
                    <span class="px-3 py-1 bg-opacity-30 rounded-full text-sm font-medium capitalize flex gap-2 bg-gradient-to-r <%= getTypeGradient(type) %>">
                      <%= type %>
                    </span>
                  <% }); %>
                </div>
              </a>
          </div>
          <% }) %>
        </div>

        
        <!-- Pagination Controls -->
        <div class="flex justify-center mt-8 space-x-2">
          <% if (currentPage > 1) { %>
            <a href="?page=<%= currentPage - 1 %>" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">Previous</a>
          <% } %>
          <% pagination.forEach(page => { %>
            <a href="?page=<%= page %>" class="px-4 py-2 <%= page === currentPage ? 'bg-indigo-700 text-white' : 'bg-indigo-200 text-indigo-800' %> rounded-lg hover:bg-indigo-300 transition-colors"><%= page %></a>
          <% }) %>
          <% if (currentPage < totalPages) { %>
            <a href="?page=<%= currentPage + 1 %>" class="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors">Next</a>
          <% } %>
        </div>
        <% } %>

      <script>

        const pokemonCards = document.querySelectorAll('.pokemon-card');
          const loadMoreBtn = document.getElementById('loadMoreBtn');
          let visibleCount = 20;

          loadMoreBtn?.addEventListener('click', () => {
            const nextCount = visibleCount + 20;

            // Tampilkan kartu dari index visibleCount sampai nextCount
            for (let i = visibleCount; i < nextCount && i < pokemonCards.length; i++) {
              pokemonCards[i].classList.remove('hidden');
            }

            visibleCount = nextCount;

            // Kalau semua sudah terlihat, sembunyikan tombol
            if (visibleCount >= pokemonCards.length) {
              loadMoreBtn.remove();
            }
          });

      const openBtn = document.getElementById("openFilterBtn");
        const modal = document.getElementById("filterModal");
        const cancelBtn = document.getElementById("cancelBtn");
        const saveBtn = document.getElementById("saveFilterBtn");

        openBtn.addEventListener("click", () => modal.classList.remove("hidden"));
        cancelBtn.addEventListener("click", () => modal.classList.add("hidden"));

        saveBtn.addEventListener("click", () => {
          const selected = document.querySelector("input[name='type']:checked");
          if (!selected) {
            alert("Silakan pilih satu tipe Pokémon.");
            return;
          }

          const selectedType = selected.value.toLowerCase();

          // Redirect ke URL dengan query string
          const url = new URL(window.location.href);
          url.searchParams.set("type", selectedType); // satu tipe saja
          window.location.href = "/?type=" + selectedType
        });

        // get last page when go to favorite page
        document.getElementById('goToFavorite').addEventListener('click', function () {
          const fullPath = window.location.pathname + window.location.search;
          localStorage.setItem('lastHomePagePath', fullPath);
        });

        // get last page 
        document.addEventListener("DOMContentLoaded", () => {
          const fullPath = window.location.pathname + window.location.search;
          localStorage.setItem('lastPagePath', fullPath);

          // Fetch favorites once
          let favorites = JSON.parse(localStorage.getItem("favorites") || "[]");

          // Function to update button text based on favorites
          function updateFavoriteButtons() {
            document.querySelectorAll(".favorite-btn").forEach(button => {
              const pokemonId = button.dataset.id;
              const isFavorited = favorites.some(item => item.pokemonId === pokemonId);
              button.textContent = isFavorited ? "❤️" : "🤍";
            });
          }

          // Event delegation for favorite buttons
          document.querySelector(".grid").addEventListener("click", (event) => {
            if (event.target.classList.contains("favorite-btn")) {
              const button = event.target;
              const pokemonId = button.dataset.id;
              const pokemonName = button.dataset.name;
              const imgPokemon = button.dataset.img;
              const pokemonTypes = button.dataset.types.split(",");

              const index = favorites.findIndex(item => item.pokemonId === pokemonId);

              if (index !== -1) {
                // Remove from favorites
                favorites.splice(index, 1);
                button.textContent = "🤍";
              } else {
                // Add to favorites
                favorites.push({ pokemonId, pokemonName, pokemonTypes, imgPokemon });
                button.textContent = "❤️";
              }

              // Save to localStorage
              localStorage.setItem("favorites", JSON.stringify(favorites));
            }
          });

          // Initial update of favorite buttons
          updateFavoriteButtons();
          if (window.location.search.includes("reset")) {
          alert("Filter telah direset");
        }
        });

        function sendFavorites(event) {
          event.preventDefault();
          const favorites = localStorage.getItem("favorites") || "[]";

          fetch('/favorites', {
            method: "POST",
            headers: {
              'Content-Type': 'application/json'
            },
            body: favorites
          })
          .then(res => res.json())
          .then(() => {
            window.location.href = '/favorites';
          });
        }

      </script>
      
  </body>
</html>
